import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.plugin.http.HTTPRequest
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import java.util.Date
import java.util.List
import java.util.ArrayList

import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

  public static GTest test
  public static HTTPRequest request
  public static NVPair[] headers = []
  public static NVPair[] params = []
  public static Cookie[] cookies = []

    @BeforeProcess
  public static void beforeProcess() {
    HTTPPluginControl.getConnectionDefaults().timeout = 60000
    test = new GTest(1, 'prod-simulator')
    request = new HTTPRequest()
    grinder.logger.info('before process.')
  }

    @BeforeThread
  public void beforeThread() {
    test.record(this, 'test')
    grinder.statistics.delayReports = true

    	def json ='''
    {
      "mbrId" : "test" ,
      "mbrPwd" : "1111"
    }
    '''
    def threadContext = HTTPPluginControl.getThreadHTTPClientContext()
    headers = [new NVPair('Content-type', 'application/json;charset=UTF-8')];
    request.setHeaders(headers)
	  HTTPResponse result = request.POST('https://www.widtus.com/api/auth/login',json.getBytes(),headers)
    cookies = CookieModule.listAllCookies(threadContext)
    grinder.logger.info(cookies.toString())
    grinder.logger.info('before thread.')
  }

    @Before
  public void before() {
	
    // cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
	  // grinder.logger.info(cookies.toString())
    def threadContext = HTTPPluginControl.getThreadHTTPClientContext()
     cookies.each {
    CookieModule.addCookie(it ,threadContext)
    grinder.logger.info("{}", it)
    }
    grinder.logger.info('before. init headers and cookies')
  }

    @Test
  public void test() {
    def json ='''
{
    "product_execute_id": "r-210127022649221",
    "data": {
        "SKGC-H730F": 0,
        "SKGC-B330F": 0,
        "SKGC-BX3500": 0,
        "SKGC-BX3800": 30,
        "SKGC-BX3900": 30,
        "SKGC-BX3910": 0,
        "SKGC-BX3920": 0,
        "SKGC-BX3950": 0,
        "SKGC-HX3700": 0,
        "SKGC-HX3800": 0,
        "SKGC-HX3900": 0,
        "SKGC-BH3820": 0,
        "SKGC-R680S": 0,
        "SKGC-SL851": 0,
        "SKGC-SL8605": 0,
        "SKGC-SL861": 0,
        "SKGC-SL865": 15,
        "SKGC-SL8613": 0,
        "SKGC-SL8705": 0,
        "SKGC-SL871": 0,
        "SKGC-SL875": 15,
        "SKGC-SL8730": 0,
        "SKGC-SL883": 0,
        "SKGC-SL891": 0,
        "F-WM-1250": 0,
        "F-WW-1CY": 0,
        "F-TK6300": 0,
        "F-T3000": 10,
        "F-TJ3CA": 0,
        "A-AA24": 0,
        "A-MBN": 0,
        "A-MB50": 0,
        "A-MBNPK": 0,
        "A-MBS": 0,
        "A-MBL": 0,
        "A-MBD": 0,
        "A-PA250": 0,
        "A-PAF": 0,
        "A-AO": 0,
        "A-GMS": 0,
        "MI": "NaN",
        "IZ23": "NaN",
        "IZ-30": "NaN",
        "TS": "NaN",
        "FM": "NaN"
    },
    "user_input_data": {
        "SKGC-BX3800": "30",
        "SKGC-SL865": "15",
        "F-T3000": "10",
        "SKGC-BX3900": "30",
        "SKGC-SL875": "15"
    }
}
		'''
    // def threadContext = HTTPPluginControl.getThreadHTTPClientContext()
    HTTPResponse result = request.POST('https://workspace.widtus.com/api/vrdlab/simulator/product-execute/r-210127022649221/predict',json.getBytes(),headers)
    // HTTPResponse result = request.POST('http://10.242.18.125/api/auth/login',json.getBytes(),headers)
    // cookies = CookieModule.listAllCookies(threadContext)
    // grinder.logger.info(cookies.toString())
    if (result.statusCode == 301 || result.statusCode == 302) {
      grinder.logger.warn('Warning. The response may not be correct. The response code was {}.', result.statusCode)
        } else {
      assertThat(result.statusCode, is(200))
    }
  }
  

}
